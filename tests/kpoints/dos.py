import numpy as np
from eminus.units import ev2ha, ha2ev

ef = ev2ha(7.011017770850803)
e = ev2ha(np.array([[[-2.76107584, -0.34892181,  5.72496256,  5.72618254,
          8.12229761,  9.79099753,  9.79212613, 13.57498945]],

       [[-3.13660154,  0.20284547,  5.77438928,  5.77560577,
          8.17836686,  9.86232733,  9.86346004, 13.68375288]],

       [[-3.80095368,  1.39239171,  5.9235052 ,  5.92471613,
          8.34387506, 10.02700573, 10.02814576, 13.94113226]],

       [[-4.40328837,  2.85254848,  6.17036839,  6.17159014,
          8.61151701, 10.10395546, 10.10504277, 13.52577417]],

       [[-4.85620074,  4.45730462,  6.49811888,  6.49939281,
          8.94536518,  9.85038975,  9.85127498, 12.18006487]],

       [[-5.13389028,  6.06074065,  6.84167919,  6.84307738,
          9.2184212 ,  9.38872869,  9.38945072, 10.79445785]],

       [[-5.22737632,  7.01146343,  7.01320808,  7.01475446,
          9.14801596,  9.14876873,  9.14936209, 10.12016423]],

       [[-5.13573565,  6.46275991,  6.60939117,  6.61108014,
          8.89571765,  9.66115954,  9.66205339, 10.6334108 ]],

       [[-4.86189095,  5.35268816,  5.89139524,  5.89292777,
          8.33999287, 10.70086369, 10.70178688, 11.0216934 ]],

       [[-4.40866461,  4.09904906,  5.21049567,  5.21195784,
          7.75403791,  9.99518127, 11.90434825, 11.90524363]],

       [[-3.78115619,  2.8013106 ,  4.65081117,  4.65223822,
          7.27203478,  8.84297589, 13.17215552, 13.17297762]],

       [[-2.98777092,  1.49961577,  4.240001  ,  4.24140938,
          6.95542804,  7.93173378, 14.47445926, 14.47517754]],

       [[-2.04087499,  0.2330529 ,  3.99000785,  3.99140688,
          6.8393207 ,  7.30452101, 15.79562661, 15.79621912]],

       [[-0.9594024 , -0.95773561,  3.9061998 ,  3.90759598,
          6.94735091,  6.94836721, 16.79202523, 16.79259346]],

       [[-0.97559524, -0.89361384,  3.46276165,  3.95912756,
          7.00749207,  7.58612804, 16.21437172, 16.43533936]],

       [[-1.06639905, -0.69580761,  2.71742514,  4.11342461,
          7.18443672,  8.95461941, 15.18313409, 15.68104634]],

       [[-1.32762937, -0.36723285,  2.20230562,  4.3646161 ,
          7.47392179, 10.59813207, 14.10295502, 14.70841952]],

       [[-1.32836329, -0.36656317,  2.20221834,  4.36404645,
          7.47319647, 10.59872376, 14.10353898, 14.7021116 ]],

       [[-1.987528  ,  0.24550534,  2.12724861,  4.81194484,
          7.9929796 , 12.68386356, 12.82940022, 13.63962474]],

       [[-2.82899011,  1.06735758,  2.58846974,  5.36365128,
          8.63541468, 11.72264399, 12.11136619, 12.87546656]],

       [[-3.63942685,  2.09190405,  3.38269729,  5.94786613,
          9.27703247, 10.80309981, 11.18623267, 12.27171166]],

       [[-4.27845144,  3.35901511,  4.4398482 ,  6.51609463,
          9.73579934, 10.16569221, 10.48598641, 12.1444868 ]],

       [[-4.81804396,  4.68030059,  5.49550495,  6.8029344 ,
          9.56420566,  9.65441536,  9.83066942, 12.00354395]],

       [[-5.12435802,  6.11769688,  6.52085447,  6.96894965,
          9.25291761,  9.37423263,  9.4554144 , 10.8378859 ]],

       [[-5.22737632,  7.01146343,  7.01320808,  7.01475446,
          9.14801596,  9.14876873,  9.14936209, 10.12016423]]]))

wk = np.ones(25) / 25

def delta(x, x0, width):
    return np.exp(np.clip(-((x - x0) / width)**2,
                            -100.0, 100.0)) / (np.sqrt(np.pi) * width)


def fold(energies, weights, npts, width):
    emin = min(energies) - 5 * width
    emax = max(energies) + 5 * width
    e = np.linspace(emin, emax, npts)
    dos_e = np.zeros(npts)
    for e0, w in zip(energies, weights):
        dos_e += w * delta(e, e0, width)
    return e, dos_e


def get_dos(epsilon, wk, spin=0, npts=201, width=0.1):
   def delta(x, x0, width):
      return np.exp(np.clip(-((x - x0) / width)**2, -100, 100)) / (np.sqrt(np.pi) * width)

   energies = epsilon[:, spin].flatten()
   emin = np.min(energies) - 5 * width
   emax = np.max(energies) + 5 * width
   e = np.linspace(emin, emax, npts)
   dos_e = np.zeros(npts)
   for e0, w in zip(energies, wk):
      dos_e += w * delta(e, e0, width)
   return e, dos_e

energy, dos = get_dos(e - ef, wk)

import matplotlib.pyplot as plt
plt.plot(ha2ev(energy), dos)
plt.ylabel('Density of States')
plt.show()


# import matplotlib.pyplot as plt
# from gpaw import GPAW, PW

# from ase.build import bulk
# a = 5.43
# si = bulk('Si', 'diamond', a)
# width = None
# k = 2

# si.calc = GPAW(kpts={'size': (k, k, k), 'gamma': True},
#                 mode=PW(200),
#                 xc='PBE',
#                 convergence={'bands': 5})
# si.get_potential_energy()

# try:
#     ef = si.calc.get_fermi_level()
# except ValueError:
#     ef = 0
# energy, dos = si.calc.get_dos(spin=0, width=width)
# plt.plot(energy - ef, dos)
# if si.calc.get_number_of_spins() == 2:
#     energy, dos = si.calc.get_dos(spin=1, width=width)
#     plt.plot(energy - ef, dos)
#     plt.legend(('up', 'down'), loc='upper left')
# plt.xlabel(r'$\epsilon - \epsilon_F \ \rm{(eV)}$')
# plt.ylabel('Density of States (1/eV)')
# plt.show()
